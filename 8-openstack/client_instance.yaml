---
heat_template_version: 2015-10-15

# This is a Heat resource for automating creation of a configured number of
# cmopute instances, with two Cinder volumes attached to each.
#
# The Heat stack is created using (for example):
# heat stack-create ceph_bench -f ceph_bench_setup.yaml -e devel-stack.yaml
#
# The resources used in the test configuration are then deleted using:
# heat stack-delete ceph_bench
#
# Parameters are typically redefined according to local config in an
# environment file (see prod-stack.yaml and devel-stack.yaml)

description: >
  Heat resource for a Ceph benchmarking client with two (Ceph backed)
  Cinder volumes attached.

parameters:
  client_name:
    type: string
    label: Client instance name prefix
    default: 'client'
  client_count:
    type: number
    label: Number of client instances to create
    default: 4
  client_flavor:
    type: string
    label: Flavor name or UUID
    default: 'm1.large'
  client_image:
    type: string
    label: Image name or UUID
  client_network:
    type: string
    label: Network data for instance connectivity
  client_az:
    type: string
    label: Availability Zone for launching client instances
    default: 'nova'
  client_secgroup:
    type: string
    label: The name of the security group created for SSH access to Ceph clients
  ssh_key:
    type: string
    label: SSH key pair name
  cinder_backend:
    type: string
    label: Name of the Ceph volume backend in Cinder
  floating_network:
    type: string
    label: Name of the floating IP network
    
resources:
  client_dev_1:
    type: OS::Cinder::Volume
    properties:
      size: 125
      volume_type: { get_param: cinder_backend }

  client_dev_2:
    type: OS::Cinder::Volume
    properties:
      size: 125
      volume_type: { get_param: cinder_backend }

  client_attach_1:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: client_dev_1 }
      instance_uuid: { get_resource: client_instance }

  client_attach_2:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: client_dev_2 }
      instance_uuid: { get_resource: client_instance }

  client_nic:
    type: OS::Neutron::Port
    properties:
      network: { get_param: client_network }
      port_security_enabled: True
      security_groups: [ {get_param: client_secgroup} ]

  client_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: floating_network }

  client_fip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: client_fip }
      port_id: { get_resource: client_nic }

  client_instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: client_name }
      flavor: { get_param: client_flavor }
      availability_zone: { get_param: client_az }
      image: { get_param: client_image }
      key_name: { get_param: ssh_key }
      networks: [ port: { get_resource: client_nic } ]
        
